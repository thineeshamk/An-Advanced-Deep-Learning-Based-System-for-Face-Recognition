# -*- coding: utf-8 -*-
"""Attendance System .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xp1Vk1u2loaGe4DooX3b700FpRPQhdu0
"""

# -----------------------------------
# --- 8. Real-time Attendance System ---
# -----------------------------------

# Mapping folder names (class_names) to real student names - update this dict as per your dataset folder names and student names
folder_to_name = {
    class_names[i]: f"Student_{i+1}" for i in range(len(class_names))
}
# Or manually map if you want exact names, e.g.:
# folder_to_name = {'10': 'Alice', '12': 'Bob', ...}

# Load the saved model for inference
model = keras.models.load_model("face_recognition_model.h5")

# Initialize attendance dict
attendance = {folder_to_name[folder]: None for folder in class_names}

# Load OpenCV face detector
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# Start webcam
cap = cv2.VideoCapture(0)
print("[INFO] Starting webcam for real-time attendance. Press 'q' to quit.")

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    for (x,y,w,h) in faces:
        face_img = frame[y:y+h, x:x+w]
        face_rgb = cv2.cvtColor(face_img, cv2.COLOR_BGR2RGB)
        face_resized = cv2.resize(face_rgb, (224,224))
        face_norm = face_resized / 255.0
        face_input = np.expand_dims(face_norm, axis=0)

        preds = model.predict(face_input)[0]
        pred_class = np.argmax(preds)
        confidence = preds[pred_class]

        if confidence > 0.8:
            name = folder_to_name[class_names[pred_class]]
            if attendance[name] is None:
                attendance[name] = datetime.now().strftime("%H:%M:%S")

            label = f"{name} ({confidence:.2f})"
            color = (0, 255, 0)
        else:
            label = "Unknown"
            color = (0, 0, 255)

        cv2.rectangle(frame, (x,y), (x+w, y+h), color, 2)
        cv2.putText(frame, label, (x, y-10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

    cv2.imshow("Facial Attendance", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

print("\nAttendance Report:")
for student, time in attendance.items():
    print(f"{student}: {time if time else 'Absent'}")

# Save attendance to CSV
with open("attendance_log.csv", "w", newline="") as f:
    writer = csv.writer(f)
    writer.writerow(["Name", "Time"])
    for student, time in attendance.items():
        writer.writerow([student, time if time else "Absent"])

print("Attendance saved to attendance_log.csv")